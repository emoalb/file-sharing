{"version":3,"sources":["config/Config.js","components/UploadPageChild.js","components/UploadPage.js","components/ListFilesPage.js","hooks/UseFetchHook.js","components/NavBar.js","components/App.js","reportWebVitals.js","index.js"],"names":["Config","UploadPageChild","addToast","useToasts","getUploadParams","url","onChangeStatus","status","meta","console","log","appearance","autoDismiss","onSubmit","files","allFiles","map","f","forEach","remove","styles","dropzone","minHeight","maxHeight","UploadPage","id","downloadFile","file","fetch","then","response","blob","window","URL","createObjectURL","a","document","createElement","href","download","click","noFilesComponent","myFileComponent","key","onClick","bind","ListFilesPage","useState","data","setData","loading","setLoading","fetchFiles","useCallback","controller","signal","json","useEffect","AbortController","abort","useFetch","length","d","index","LinkComponent","props","className","to","caption","NavBar","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4dcd3e19.chunk.js","sourcesContent":["export  const Config =  {\r\n\r\n    DEVURL :\"/\", // \"http://localhost:8666/\",\r\n    URL : \"/\",\r\n\r\n\r\n}","import Dropzone from \"react-dropzone-uploader\";\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport {useToasts} from 'react-toast-notifications';\r\nimport React from \"react\";\r\nimport {Config} from \"../config/Config\";\r\n\r\nconst UploadPageChild = () => {\r\n\r\n    const {addToast} = useToasts();\r\n    const getUploadParams = () => {\r\n        return {url: Config.DEVURL+\"api/uploadFile\"}\r\n    }\r\n\r\n    const handleChangeStatus = ({meta}, status) => {\r\n        console.log(meta,status);\r\n        console.log(status, meta);\r\n        if (status === \"preparing\") {\r\n            addToast(status, {appearance: 'info',autoDismiss:4});\r\n        }\r\n        if (status === \"done\") {\r\n            addToast(status, {appearance: 'success',autoDismiss:4});\r\n        }\r\n        if (status === \"exception_upload\") {\r\n            addToast(status, {appearance: 'error',autoDismiss:4});\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (files, allFiles) => {\r\n        console.log(files.map(f => f.meta))\r\n        allFiles.forEach(f => f.remove())\r\n    }\r\n\r\n    return (\r\n\r\n        <Dropzone\r\n            getUploadParams={getUploadParams}\r\n            onChangeStatus={handleChangeStatus}\r\n            onSubmit={handleSubmit}\r\n            styles={{dropzone: {minHeight: 200, maxHeight: 250}}}\r\n        />\r\n\r\n\r\n    )\r\n}\r\nexport default UploadPageChild;","import {ToastProvider} from \"react-toast-notifications\";\r\nimport React from \"react\";\r\nimport UploadPageChild from \"./UploadPageChild\";\r\n\r\nconst UploadPage = () => {\r\n    return (\r\n        <section id={\"upload-page\"}>\r\n            <ToastProvider>\r\n                <UploadPageChild/>\r\n            </ToastProvider>\r\n        </section>\r\n    )\r\n}\r\nexport default UploadPage;","import React from 'react';\r\nimport {useFetch} from \"../hooks/UseFetchHook\";\r\nimport {Config} from \"../config/Config\";\r\n\r\nconst ListFilesPage = () => {\r\n\r\n    const [data, loading] = useFetch(Config.DEVURL + \"api/getFileList\")\r\n\r\n\r\n    return (\r\n        <section id={\"all-files-page\"}>\r\n            {\r\n                loading ? (\"Loading....\") : (data.length === 0 ? noFilesComponent() :\r\n                    data.map((d, index) =>\r\n                        myFileComponent(d, index)))\r\n\r\n            }\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nconst downloadFile = (file) => {\r\n    console.log(\"Trying to download file with name \" + file)\r\n    fetch(Config.DEVURL + \"api/downloadFile/\" + file).then(response => {\r\n        response.blob().then(blob => {\r\n            let url = window.URL.createObjectURL(blob);\r\n            let a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = file;\r\n            a.click();\r\n        });\r\n\r\n        //window.location.href = response.url;)\r\n    })\r\n}\r\nconst noFilesComponent = () => {\r\n    return (\r\n        <p>No files Yet!</p>\r\n    )\r\n}\r\nconst myFileComponent = (file, key) => {\r\n    return (\r\n        <p key={key}>{file}\r\n            <button onClick={downloadFile.bind(this, file)}>Download</button>\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default ListFilesPage;","import {useState, useEffect} from \"react\";\r\nimport {useCallback} from \"react\";\r\n\r\nfunction useFetch(url) {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const fetchFiles = useCallback(async (controller) => {\r\n        try {\r\n            const response = await fetch(url, {signal: controller.signal});\r\n            const json = await response.json();\r\n            setData(json);\r\n            setLoading(false)\r\n        } catch (e) {\r\nsetLoading(true)\r\n        } finally {\r\nsetLoading(false)\r\n        }\r\n    },[url])\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController()\r\n        fetchFiles(controller).then(()=>{setLoading(false)})\r\n        return () => controller.abort()\r\n\r\n    }, [fetchFiles]);\r\n\r\n\r\n    return [data, loading];\r\n}\r\n\r\nexport {useFetch};","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n        <nav>\r\n            <h1>Spring Cloud Beta 0.0.3</h1>\r\n            <ul className=\"nav nav-pills card-header-pills\">\r\n                <LinkComponent caption=\"Upload Files\" href=\"/\"/>\r\n                <LinkComponent caption=\"List Files\" href=\"/list-files\"/>\r\n            </ul>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nconst LinkComponent = (props) => {\r\n    return (\r\n        <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to={props.href}>{props.caption}</Link>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport UploadPage from \"./UploadPage\";\r\nimport {\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport ListFilesPage from \"./ListFilesPage\";\r\nimport NavBar from \"./NavBar\";\r\nconst App = (props) => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n         <NavBar/>\r\n            <Switch>\r\n                <Route path=\"/list-files\">\r\n                    <ListFilesPage/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <UploadPage/>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// eslint-disable-next-line\r\nimport $ from 'jquery';\r\n// eslint-disable-next-line\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n    <App/>\r\n    </BrowserRouter>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}